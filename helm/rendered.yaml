---
# Source: trade/templates/00-networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trade-network-policy
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: trade
          app.kubernetes.io/instance: trade
  egress:
  - {} # Allow all egress traffic
---
# Source: trade/templates/04-scrapers/tvscraper-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: trade-tvscraper-secret
type: Opaque
stringData:
  TRADE_VIEW_USER: ""
  TRADE_VIEW_PASS: ""
---
# Source: trade/templates/07-init-containers/dependency-checks.yaml
# This is a template for dependency checking init containers
# It's included in individual service deployments, not deployed as a standalone resource
apiVersion: v1
kind: ConfigMap
metadata:
  name: trade-dependency-checks
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  wait-for-rabbitmq.sh: |
    #!/bin/sh
    until nc -z trade-rabbitmq 5672; do
      echo "Waiting for RabbitMQ..."
      sleep 5
    done
    echo "RabbitMQ is ready!"
  
  wait-for-weaviate.sh: |
    #!/bin/sh
    until nc -z trade-weaviate 8080; do
      echo "Waiting for Weaviate..."
      sleep 5
    done
    echo "Weaviate is ready!"
---
# Source: trade/templates/01-persistent-volumes/output-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trade-output-pvc
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
# Source: trade/templates/01-persistent-volumes/rabbitmq-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trade-rabbitmq-pvc
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: rabbitmq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: trade/templates/01-persistent-volumes/weaviate-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trade-weaviate-pvc
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: weaviate
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: trade/templates/02-rabbitmq/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-rabbitmq
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: rabbitmq
spec:
  type: ClusterIP
  ports:
  - name: amqp
    port: 5672
    targetPort: amqp
    protocol: TCP
  - name: management
    port: 15672
    targetPort: management
    protocol: TCP
  selector:
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    component: rabbitmq
---
# Source: trade/templates/03-weaviate/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-weaviate
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: weaviate
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 50051
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    component: weaviate
---
# Source: trade/templates/06-core-services/aws-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-aws-gateway
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: aws-gateway
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 50053
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    component: aws-gateway
---
# Source: trade/templates/06-core-services/mock-executor.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-mock-executor
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: mock-executor
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 50051
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    component: mock-executor
---
# Source: trade/templates/06-core-services/stock-hub.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-stock-hub
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: stock-hub
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 50052
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    component: stock-hub
---
# Source: trade/templates/08-selenium/hub-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: trade-selenium-hub
spec:
  selector:
    app: trade
    component: selenium-hub
  ports:
    - name: http
      port: 4444
      targetPort: 4444
    - name: event-pub
      port: 4442
      targetPort: 4442
    - name: event-sub
      port: 4443
      targetPort: 4443
  env:
    - name: VNC_PASSWORD
      value: secret
---
# Source: trade/templates/04-scrapers/ivscraper.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-ivscraper
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: ivscraper
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: ivscraper
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: ivscraper
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            until nc -z trade-rabbitmq 5672; do
              echo "Waiting for RabbitMQ..."
              sleep 5
            done
            echo "RabbitMQ is ready!"
      containers:
      - name: ivscraper
        image: "ghcr.io/wayming/trade/ivscraper:latest"
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args:
          - |
            Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp &
            export DISPLAY=:99
            python -m news_scraper.scraper_investing
        env:
          - name: DISPLAY
            value: ":99"
          - name: RABBITMQ_URL
            value: "amqp://admin:password@trade-rabbitmq:5672/"
          - name: RABBITMQ_USER
            value: "admin"
          - name: RABBITMQ_PASS
            value: "password"
        volumeMounts:
          - name: output-volume
            mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/04-scrapers/tvscraper.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-tvscraper
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: tvscraper
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: tvscraper
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: tvscraper
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            until nc -z trade-rabbitmq 5672; do
              echo "Waiting for RabbitMQ..."
              sleep 5
            done
            echo "RabbitMQ is ready!"
      containers:
      - name: tvscraper
        image: "ghcr.io/wayming/trade/tvscraper:latest"
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args:
          - |
            Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp &
            export DISPLAY=:99
            python -m news_scraper.scraper_trading_view
        env:
        - name: DISPLAY
          value: ":99"
        - name: SELENIUM_HUB_URL
          value: "http://trade-selenium-hub:4444/wd/hub"
        - name: TRADE_VIEW_USER
          valueFrom:
            secretKeyRef:
              name: trade-tvscraper-secret
              key: TRADE_VIEW_USER
        - name: TRADE_VIEW_PASS
          valueFrom:
            secretKeyRef:
              name: trade-tvscraper-secret
              key: TRADE_VIEW_PASS
        - name: RABBITMQ_HOST
          value: "trade-rabbitmq"
        - name: RABBITMQ_USER
          value: "admin"
        - name: RABBITMQ_PASS
          value: "password"
        volumeMounts:
          - name: output-volume
            mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/05-analyzers/ivanalyser.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-ivanalyser
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: ivanalyser
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: ivanalyser
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: ivanalyser
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      containers:
      - name: ivanalyser
        image: "ghcr.io/wayming/trade/ivanalyser:latest"
        imagePullPolicy: Always
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        - name: WEAVIATE_URL
          value: "http://trade-weaviate:8080"
        - name: RABBITMQ_USER
          value: "admin"
        - name: RABBITMQ_PASS
          value: "password"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        command: ["sh", "-c", "python -m news_scraper.analyser_investing"]
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/05-analyzers/tvanalyser.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-tvanalyser
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: tvanalyser
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: tvanalyser
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: tvanalyser
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      containers:
      - name: tvanalyser
        image: "ghcr.io/wayming/trade/tvanalyser:latest"
        imagePullPolicy: Always
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        - name: WEAVIATE_URL
          value: "http://trade-weaviate:8080"
        - name: RABBITMQ_USER
          value: "admin"
        - name: RABBITMQ_PASS
          value: "password"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        command: ["sh", "-c", "python -m news_scraper.analyser_trading_view"]
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/06-core-services/aws-gateway.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-aws-gateway
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: aws-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: aws-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: aws-gateway
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      containers:
      - name: aws-gateway
        image: "ghcr.io/wayming/trade/aws_gateway:latest"
        imagePullPolicy: Always
        ports:
        - name: grpc
          containerPort: 50053
          protocol: TCP
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/06-core-services/mock-executor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-mock-executor
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: mock-executor
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: mock-executor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: mock-executor
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      containers:
      - name: mock-executor
        image: "ghcr.io/wayming/trade/mock_executor:latest"
        imagePullPolicy: Always
        ports:
        - name: grpc
          containerPort: 50051
          protocol: TCP
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/06-core-services/news-store.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-news-store
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: news-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: news-store
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: news-store
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      - name: wait-for-weaviate
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-weaviate 8080; do
            echo "Waiting for Weaviate..."
            sleep 5
          done
          echo "Weaviate is ready!"
      containers:
      - name: news-store
        image: "ghcr.io/wayming/trade/news_store:latest"
        imagePullPolicy: Always
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        - name: WEAVIATE_URL
          value: "http://trade-weaviate:8080"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/06-core-services/stock-hub.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-stock-hub
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: stock-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: stock-hub
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: stock-hub
    spec:
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z trade-rabbitmq 5672; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
          echo "RabbitMQ is ready!"
      containers:
      - name: stock-hub
        image: "ghcr.io/wayming/trade/stock_hub:latest"
        imagePullPolicy: Always
        ports:
        - name: grpc
          containerPort: 50052
          protocol: TCP
        env:
        - name: RABBITMQ_URL
          value: "amqp://admin:password@trade-rabbitmq:5672/"
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
---
# Source: trade/templates/08-selenium/hub-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-selenium-hub
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: selenium-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trade
      component: selenium-hub
  template:
    metadata:
      labels:
        app: trade
        component: selenium-hub
    spec:
      containers:
        - name: hub
          image: selenium/hub:4.35.0
          ports:
            - containerPort: 4444
          env:
            - name: SE_EVENT_BUS_HOST
              value: trade-selenium-hub
            - name: SE_EVENT_BUS_PUBLISH_PORT
              value: "4442"
            - name: SE_EVENT_BUS_SUBSCRIBE_PORT
              value: "4443"
          readinessProbe:
            httpGet:
              path: /wd/hub/status
              port: 4444
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: trade/templates/08-selenium/node-chrome-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-selenium-node-chrome
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: selenium-node-chrome
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trade
      component: selenium-node-chrome
  template:
    metadata:
      labels:
        app: trade
        component: selenium-node-chrome
    spec:
      containers:
        - name: chrome
          image: selenium/node-chrome:4.35.0
          env:
            - name: SE_EVENT_BUS_HOST
              value: trade-selenium-hub
            - name: SE_EVENT_BUS_PUBLISH_PORT
              value: "4442"
            - name: SE_EVENT_BUS_SUBSCRIBE_PORT
              value: "4443"
            - name: SE_NODE_GRID_URL
              value: http://trade-selenium-hub:4444
            - name: SE_NODE_MAX_SESSIONS
              value: "1"
            - name: SE_NODE_OPTS
              value: "--no-sandbox --disable-gpu --headless=new --disable-dev-shm-usage --window-size=1280,1024"
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
          resources:
            {}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 2Gi
---
# Source: trade/templates/02-rabbitmq/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: trade-rabbitmq
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: rabbitmq
spec:
  serviceName: trade-rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: "ghcr.io/wayming/trade/rabbitmq:latest"
        imagePullPolicy: Always
        ports:
        - name: amqp
          containerPort: 5672
          protocol: TCP
        - name: management
          containerPort: 15672
          protocol: TCP
        env:
          - name: RABBITMQ_DEFAULT_USER
            value: admin
          - name: RABBITMQ_DEFAULT_PASS
            value: password
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - ping
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - check_running
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: trade-rabbitmq-pvc
---
# Source: trade/templates/03-weaviate/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: trade-weaviate
  labels:
    helm.sh/chart: trade-0.1.0
    app.kubernetes.io/name: trade
    app.kubernetes.io/instance: trade
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    component: weaviate
spec:
  serviceName: trade-weaviate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trade
      app.kubernetes.io/instance: trade
      component: weaviate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: trade
        app.kubernetes.io/instance: trade
        component: weaviate
    spec:
      containers:
      - name: weaviate
        image: "semitechnologies/weaviate:1.21.2"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 50051
          protocol: TCP
        env:
        - name: QUERY_DEFAULTS_LIMIT
          value: "25"
        - name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
          value: "true"
        - name: PERSISTENCE_DATA_PATH
          value: "/var/lib/weaviate"
        volumeMounts:
        - name: weaviate-data
          mountPath: /var/lib/weaviate
        - name: output-volume
          mountPath: /app/output
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /v1/.well-known/live
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v1/.well-known/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: trade-output-pvc
      - name: weaviate-data
        persistentVolumeClaim:
          claimName: trade-weaviate-pvc
