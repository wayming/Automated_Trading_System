version: "3.8"
services:
  ivscraper:
    build:
      context: ../  # Set build context to project root
      dockerfile: docker/Dockerfile.scraper
    container_name: python-scraper-iv
    volumes:
      - ../output:/app/output  # Mount the current directory to /app in the container
    environment:
      - DISPLAY=:99  # If running headlessly or using Xvfb
    # ports:
    #   - "5000:5000"  # Example port forwarding (if needed)
    networks:
      - scraper-network
    restart: always  # Restart container if it crashes
    command: >
      bash -c "
        Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp &
        export DISPLAY=:99
        python -m news_scraper.scraper_investing
      "
    depends_on:
      rabbitmq:
        condition: service_healthy # RabbitMQ begin to accept connections

  # tvscraper:
  #   build:
  #     context: ../  # Set build context to project root
  #     dockerfile: docker/Dockerfile.scraper
  #   container_name: python-scraper-tv
  #   volumes:
  #     - ../output:/app/output  # Mount the current directory to /app in the container
  #   environment:
  #     - DISPLAY=:99  # If running headlessly or using Xvfb
  #   # ports:
  #   #   - "5000:5000"  # Example port forwarding (if needed)
  #   networks:
  #     - scraper-network
  #   restart: always  # Restart container if it crashes
  #   # command: >
  #   #   xvfb-run -a python -m news_scraper.scraper_investing
  #   command: >
  #     bash -c "
  #       Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp &
  #       export DISPLAY=:99
  #       python -m news_scraper.scraper_trading_view
  #     "
  #   depends_on:
  #     - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    restart: always
    networks:
      - scraper-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 10

  ivanalyser:
    build:
      context: ../  # Set build context to project root
      dockerfile: docker/Dockerfile.analyser
    env_file:
      - .env
    volumes:
      - ../output:/app/output  # Mount the current directory to /app in the container
    command: python -m news_scraper.analyser_investing
    depends_on:
      rabbitmq:
        condition: service_healthy # RabbitMQ begin to accept connections
    networks:
      - scraper-network


networks:
  scraper-network:
    driver: bridge
